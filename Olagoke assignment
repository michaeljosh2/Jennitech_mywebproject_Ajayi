<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Olagoke Assignment - JavaScript Functions</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.6;
        }
        h1, h2 {
            color: #2c3e50;
        }
        pre {
            background: #f4f4f4;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
        }
        code {
            font-family: Consolas, monospace;
            color: #c0392b;
        }
        ul {
            margin-left: 20px;
        }
    </style>
</head>
<body>
    <h1>What is a Function?</h1>
    <p>A function is a block of reusable code that performs a specific task.  
    Instead of writing the same code multiple times, we wrap it in a function and call it whenever needed.</p>

    <p>Think of a function as a machine:</p>
    <ul>
        <li><b>Input</b> â†’ Parameters</li>
        <li><b>Process</b> â†’ Function Body</li>
        <li><b>Output</b> â†’ Return value</li>
    </ul>

    <h2>Syntax of a function</h2>
    <pre><code>
function functionName(parameters) {
    // Code to execute
    return value;  // optional
}
    </code></pre>

    <h2>ðŸ”¹ Why Use Functions?</h2>
    <ul>
        <li>Reusability â†’ Write once, use many times.</li>
        <li>Modularity â†’ Break complex problems into smaller pieces.</li>
        <li>Readability â†’ Code becomes cleaner and more structured.</li>
        <li>Maintainability â†’ Easier to debug and update.</li>
        <li>Avoid Repetition â†’ Donâ€™t repeat logic in multiple places.</li>
    </ul>

    <h2>Types of Functions in JavaScript</h2>

    <h3>1. Named Function</h3>
    <pre><code>
function greet() {
    console.log("Hello, World!");
}
greet(); // Output: Hello, World!
    </code></pre>

    <h3>2. Function with Parameters</h3>
    <pre><code>
function add(a, b) {
    return a + b;
}
console.log(add(5, 3)); // Output: 8
    </code></pre>

    <h3>3. Arrow Function (ES6)</h3>
    <pre><code>
const square = n => n * n;
console.log(square(7)); // 49
    </code></pre>

    <h3>4. Rest Parameters</h3>
    <pre><code>
function sumAll(...numbers) {
    return numbers.reduce((a, b) => a + b, 0);
}
console.log(sumAll(1, 2, 3, 4, 5)); // 15
    </code></pre>
</body>
</html>
